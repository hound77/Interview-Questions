@Test
					@DisplayName("Stock fetch with limit >50")
					@WithMockUser
					void getProductsStocklimitexceedTest() {	
						
						StockResponse response=new StockResponse();
						response.setReturnCode(8008);
						
						AllProducts reqBody=new AllProducts();
						reqBody.setProducts(Arrays.asList("20002","1234","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50"));
						try {
							when(utils.verifyFcAvailable(any(), any())).thenReturn(true);
							when(utils.verifyFcActive(any(), any())).thenReturn(true);
						
						when(service.getAllProductStocks(any(),any(),any(),any(),any())).thenReturn(Mono.just(response));
						}
						catch (Exception e)
						{
							e.printStackTrace();
						}
						
						StepVerifier.create(
								webTestClient.method(HttpMethod.GET).uri(Endpoints.ENDPOINT_V1_NMIS_PREFIX+Endpoints.PRODUCT+"?excludeShortExpiryFlag=true&branchCode=769").body(Mono.just(reqBody), AllProducts.class)
						.accept(MediaType.APPLICATION_JSON).exchange()
						.expectStatus().isOk()
						.returnResult(StockResponse.class)
						.getResponseBody())
						.expectNext(response).verifyComplete();
				
					}
	
					
					@Test
					@DisplayName("Stock fetch fc not available")
					@WithMockUser
					void getProductsfcnotavailableTest() {	
						
						StockResponse response=new StockResponse();
						response.setReturnCode(8007);
						
						AllProducts reqBody=new AllProducts();
						reqBody.setProducts(Arrays.asList("20002","1234"));
						try {
							when(utils.verifyFcAvailable(any(), any())).thenReturn(false);
					
						
						when(service.getAllProductStocks(any(),any(),any(),any(),any())).thenReturn(Mono.just(response));
						}
						catch (Exception e)
						{
							e.printStackTrace();
						}
						
						StepVerifier.create(
								webTestClient.method(HttpMethod.GET).uri(Endpoints.ENDPOINT_V1_NMIS_PREFIX+Endpoints.PRODUCT+"?excludeShortExpiryFlag=true&branchCode=799").body(Mono.just(reqBody), AllProducts.class)
						.accept(MediaType.APPLICATION_JSON).exchange()
						.expectStatus().isOk()
						.returnResult(StockResponse.class)
						.getResponseBody())
						.expectNext(response).verifyComplete();
				
					}
	